'''
validates some of the filled fields prior to Workbench transformation
this is not as rigorous as Workbench's validations, but is good for catching some likely errors
any erroneous data generated by the Workbench output from these scripts should be flagged with Paul Sutherland/CDS
'''

import os
import pandas
import argparse
import _ExtractDir, _CSV, _Validate

METADATA_DIR = "metadata"
HEADERS_DIR = "_headers"

'''
command line arguments
required, positional: source file
'''
print('Checking command line arguments - expected: [filled file]')

CLParser = argparse.ArgumentParser()
CLParser.add_argument('filled_file', type=str)
CLargs = CLParser.parse_args()
# assign arguments
FILLED_FILENAME = CLargs.filled_file
if FILLED_FILENAME not in _ExtractDir.FileList(METADATA_DIR, extensions=True):
    raise OSError("Folder " + METADATA_DIR + " does not appear to contain " + FILLED_FILENAME + ". Check.")


print("... command line arguments okay.")
'''
load xlsx to pandas DataFrame then make it a dict for ease of access
'''
# import as type str so doesn't make dates
inputDF = pandas.read_excel(os.path.join(METADATA_DIR, FILLED_FILENAME), dtype=str)
inputDict = inputDF.to_dict(orient='list')
# find out how many records we have. this is stored in shape.
inputRows = inputDF.shape[0]

'''
basic headers check
'''
print("Checking headers ...")
# grab headers to a list
headers = list(inputDict.keys())
# import valid headers from csv
headers_allValid = _CSV.CSVColToList(os.path.join(HEADERS_DIR, "_allValid.csv"), 0)
# check that the headers are valid
for header in headers:
    if header not in headers_allValid:
        raise ValueError("Input spreadsheet has an invalid column: " + header )

print("... headers okay. Validating select columns ...")
'''
validate a few columns
'''
if "agent_role" and "agent_name" and "agent_type" in headers:

    print("Checking agent_role codes...")
    for x in inputDict["agent_role"]:
        if not _Validate.nan(x):
            # multiple options possible. split:
            for y in x.split('|'):
                try:
                    _Validate.RelatorCode(y)
                except Exception as e:
                    print(str(e))

    print("Checking that agent_name and agent_role are same lengths...")
    for i in range(inputRows):
        if not _Validate.nan(inputDict["agent_name"][i]):
            try:
                _Validate.PipedFieldsSameLength(inputDict["agent_name"][i], inputDict["agent_role"][i])
            except Exception as e:
                print(str(e))

    print("Checking that agent_type is always empty or same length as agent_name...")
    for i in range(inputRows):
        if not _Validate.nan(inputDict["agent_type"][i]):
            try:
                _Validate.PipedFieldsSameLength(inputDict["agent_name"][i], inputDict["agent_type"][i])
            except Exception as e:
                print(str(e))

    print("Validating agent_type...")
    for i in range(inputRows):
        ts = inputDict["agent_type"][i]
        if not _Validate.nan(ts):
            for t in ts.split('|'):
                try:
                    _Validate.AgentType(t)
                except Exception as e:
                    print(str(e))

            

if "datecreated_edtf" in headers:
    print("Checking datecreated_edtf...")
    for x in inputDict["datecreated_edtf"]:
        if not _Validate.nan(x):
            try:
                _Validate.EDTF(x)
            except Exception as e:
                print(str(e))

if "cnairsubject" in headers:
    print("Checking cnairsubject...")
    for x in inputDict["cnairsubject"]:
        if not _Validate.nan(x):
            # multiple options possible. split:
            for y in x.split('|'):
                try:
                    _Validate.CNAIR_Culture(y)
                except Exception as e:
                    print(str(e))

if "iso639_code" in headers:
    print("Checking iso639_code...")
    for x in inputDict["iso639_code"]:
        if not _Validate.nan(x):
            # multiple options possible. split:
            for y in x.split('|'):
                try:
                    _Validate.ISO639_code(y)
                except Exception as e:
                    print(str(e))

if "title" in headers:
    print("Checking that all titles are unique...")
    # uses set() to remove duplicate values
    titles = inputDict["title"]
    if len(titles) != len(set(titles)):
        print("Warning - one or more titles are not unique, which will cause redirect errors. Add field url_alias after Workbench output.")
    print("Checking lengths of titles...")
    for title in titles:
        if len(title) >= 92:
            print("Warning - the following title has " + str(len(title)) + " characters, which is long enough to possibly cause redirect errors if this is a Book, as url_alias is clipped at 100 characters. Add field url_alias after Workbench output, setting a shorter alias.")
            print(str(title))

print("Validation of the above fields complete. This does not catch many fields. Resolve any errors noted above.")